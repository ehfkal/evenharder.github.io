<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-01-25T20:46:35+09:00</updated><id>/feed.xml</id><title type="html">……!</title><subtitle>derp derp derp</subtitle><author><name>Sangheon Lee</name></author><entry><title type="html">USACO 2020 January Contest</title><link href="/algo/USACO-2020-January-Contest/" rel="alternate" type="text/html" title="USACO 2020 January Contest" /><published>2020-01-25T20:00:00+09:00</published><updated>2020-01-25T20:00:00+09:00</updated><id>/algo/USACO-2020-January-Contest</id><content type="html" xml:base="/algo/USACO-2020-January-Contest/">&lt;p&gt;USACO Platinum을 오랜만에 쳐보았습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;대회를 다른 거 하면서 겸사겸사 치룬 와중에 1번 문제는 금방 풀려서 좋았습니다. 그러나 다음 두 문제를 생각할 시간이 별로 없었을 뿐더러 훨씬 더 어려웠습니다. 2번은 깊게 생각 안 했고 3번은 깊게 생각했었는데 삽질만 했습니다…시간이 나면 여기에 모든 Division의 문제 풀이를 작성해보도록 하겠습니다.&lt;/p&gt;</content><author><name>Sangheon Lee</name></author><category term="PS" /><summary type="html">USACO Platinum을 오랜만에 쳐보았습니다.</summary></entry><entry><title type="html">2020년 1월 중순 Problem Solving</title><link href="/algo/recent-ps-2020-01-1x/" rel="alternate" type="text/html" title="2020년 1월 중순 Problem Solving" /><published>2020-01-24T01:20:00+09:00</published><updated>2020-01-24T01:20:00+09:00</updated><id>/algo/recent-ps-2020-01-1x</id><content type="html" xml:base="/algo/recent-ps-2020-01-1x/">&lt;p&gt;풀고 싶은 문제만 쌓여가고 있습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;다양한-문제-풀이&quot;&gt;다양한 문제 풀이&lt;/h1&gt;

&lt;h2 id=&quot;boj-8339-fibonacci-machine&quot;&gt;BOJ 8339 Fibonacci Machine&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/8339&quot;&gt;문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;lazy propgation을 통한 세그먼트 트리로 풀 수 있습니다. 구간 $[a, b]$에 대해 현재 합을 $F_{i_a} + F_{i_{a+1}} + \cdots + F_{i_b}$로, 이전 합을 $F_{i_a - 1} + F_{i_{a+1} - 1} + \cdots + F_{i_b - 1}$로 정의합시다. 각 구간에 대해 $m$번 피보나치 카운터를 올려야 한다면
&lt;script type=&quot;math/tex&quot;&gt;F_{n+m} = F_{m-1}F_n + F_m F_{n+1}&lt;/script&gt;
을 이용하여 한 번에 다음 합과 다음 ‘이전 합’을 갱신해줄 수 있습니다. $F_n$에 이전 합을, $F_{n+1}$에 현재 합을 넣어주면 됩니다. 좋은 연습 문제라고 생각합니다.&lt;/p&gt;

&lt;h2 id=&quot;boj-4342-유클리드-게임&quot;&gt;BOJ 4342 유클리드 게임&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/4342&quot;&gt;문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이러한 종류의 게임은 서로 최적으로 게임을 진행할 때, 이기는지 지는지의 유무가 각 두 자연수 마다 결정되어 있습니다.&lt;/p&gt;

&lt;p&gt;간단히 용어를 정의하면,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이기는 상태 : 현재 플레이어가 최적으로 게임을 진행할 경우 승리하는 상태입니다. 이 경우 이동할 수 있는 다음 상태 중 지는 상태가 하나 이상 있습니다.&lt;/li&gt;
  &lt;li&gt;지는 상태 : 현재 플레이어가 무슨 수를 쓰더라도 상대가 최적으로 행동하면 지는 상태입니다. 이동할 수 있는 모든 상태가 이기는 상태입니다. 즉, 상대가 이기는 상태로밖에 이동하지 못합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이제 게임을 분석해보겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$(ka, a)$ 꼴의 경우 현재 차례인 사람이 이깁니다.&lt;/li&gt;
  &lt;li&gt;현재 수의 배치가 $P$라고 하고, 작은 수가 바뀌는 다음 배치를 $X$라고 하겠습니다.
    &lt;ul&gt;
      &lt;li&gt;$P$에서 할 수 있는 게 $X$로 가는 것밖에 없다면, $P$의 상태는 $X$의 상태의 반대입니다. $X$가 이기는 상태이면 $P$는 지는 상태이며, 그 반대도 성립합니다.&lt;/li&gt;
      &lt;li&gt;달리 생각하면, 이 상황은 &lt;strong&gt;큰 수를 작은 수로 나눈 몫이 1인 경우&lt;/strong&gt;입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;$P$에서 $X$ 말고 갈 수 있는 다른 상태가 있으면 $P$는 이기는 상태입니다.
    &lt;ul&gt;
      &lt;li&gt;$X$로 갈 수밖에 없는 배치를 $Q$라 하겠습니다. $P$에서는 $Q$로도, $X$로도 갈 수 있는데, 둘의 상태가 서로 반대이므로 상대에게 항상 지는 상태로 이동하게 할 수 있습니다.&lt;/li&gt;
      &lt;li&gt;이 상황은 &lt;strong&gt;큰 수를 작은 수로 나눈 몫이 2 이상인 경우&lt;/strong&gt;입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;유클리드 호제법에 의해 항상 $(ka, a)$ 꼴에 도달하게 되므로, 위의 메커니즘을 적용하여 재귀적으로 문제를  $O(\lg \max(a, b))$ 시간에 해결할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;coders-high-2014-j-fertilizing&quot;&gt;Coder’s High 2014 J. Fertilizing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/10223&quot;&gt;문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;흥미로운 문제입니다. 약간 까다로울 수 있는 그리디 아이디어를 착안해야 합니다. 바로 “$i$번째 과정 이후, 최댓값과 최솟값의 차는 $i$ 이하”라는 사실입니다. 때문에 가장 작은 콩나물들은 $i+1$번째 과정 이후엔 가장 큰 콩나물들이 됩니다.&lt;/p&gt;

&lt;p&gt;여기까지 아이디어가 나오면, 펜윅 트리나 세그먼트 트리를 통해 순차적으로 $[1, c_1]$, $[c_1+1, c_1+c_2]$, $[c_1+c_2+1, c_1+c_2+c_3]$ 처럼 콩나물을 기르고 $k_i$번째 콩나물의 키를 구하며 더하면 됩니다. 매 과정이 끝난 후 가장 작은 콩나물의 위치를 이동시키며 진행하면 됩니다.&lt;/p&gt;

&lt;p&gt;lazy propagation으로 짜니 시간 초과가 나서, 펜윅 트리로 다시 짰습니다. 시간 제한 3초였는데 600ms 정도로 통과되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;boj-1294-문자열-장식&quot;&gt;BOJ 1294 문자열 장식&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1294&quot;&gt;문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;아이디어를 완벽히 생각해내지 못해 결국 풀이를 검색한 문제입니다. 생각해보니 아이디어가 매우 자연스러워 더 슬펐습니다.&lt;/p&gt;

&lt;p&gt;$N$개의 문자열이 있을 때, 사전순으로 가장 앞서는 문자열의 첫 글자를 출력한 후, 이 문자열의 첫 글자를 제거한 후 계속 반복하면 됩니다. 이러면 최장 문자열의 길이가 $L$일 때 $O(NL^2)$에 해결 가능합니다.&lt;/p&gt;

&lt;h2 id=&quot;hackerrank--morgan-and-a-string&quot;&gt;HackerRank : Morgan and a String&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/morgan-and-a-string/problem&quot;&gt;문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 문제는 위의 문제랑 본질적으로 동일하지만 $N = 2$인 대신 $L \leq 10^5$입니다.&lt;/p&gt;

&lt;p&gt;문자열의 앞부터 하나씩 떼어가므로, 접미사 배열을 통해 $O(NL \lg L)$에 해결 가능합니다. 입력으로 들어오는 문자열이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;이면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxBx&lt;/code&gt; 꼴로 문자열을 만든 다음 관리하면 됩니다. 사이에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;를 더하는 이유는 두 문자열을 독립적으로 관리하면서도 같이 비교할 수 있게 하기 위함이며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;를 추가하였으므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;에도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;를 추가해야 각 문자열 끝까지 갔을 때 비교가 정상적으로 됩니다.&lt;/p&gt;</content><author><name>Sangheon Lee</name></author><category term="PS" /><summary type="html">풀고 싶은 문제만 쌓여가고 있습니다.</summary></entry><entry><title type="html">2020년 1월 12일 Problem Solving</title><link href="/algo/daily-ps-2020-0112/" rel="alternate" type="text/html" title="2020년 1월 12일 Problem Solving" /><published>2020-01-13T19:30:00+09:00</published><updated>2020-01-13T19:30:00+09:00</updated><id>/algo/daily-ps-2020-0112</id><content type="html" xml:base="/algo/daily-ps-2020-0112/">&lt;p&gt;문제를 조금 풀고 CF 613을 버추얼로 해보았습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;boj-1376-민식우선탐색&quot;&gt;BOJ 1376 민식우선탐색&lt;/h1&gt;

&lt;p&gt;링크 : &lt;a href=&quot;https://www.acmicpc.net/problem/1376&quot;&gt;BOJ 1376&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;특이한 순서로 DFS를 돌아야 합니다. 한 정점에서 방문할 수 있는 정점의 개수가 홀수면 중앙값의 정점 번호로, 짝수면 최소 정점 번호로 순회해야 합니다. 정점은 최대 $10^5$개지만 간선이 최대 $10^6$개입니다.&lt;/p&gt;

&lt;p&gt;동적으로 변하는 자료의 중앙값을 구하는 대표적인 방법은 세그먼트 트리 / 펜윅 트리로 k번째 원소를 구하는 함수를 작성하거나, 우선순위 큐 / 이진 탐색 트리 2개를 관리하여 가운데를 잘 나누는 것입니다. 저는 후자로 접근하여 편하게 이진 탐색 트리 기반인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::set&lt;/code&gt;으로 짜보았는데 시간 초과가 났고, 로컬에서도 5초 정도로 꽤 오래 걸렸습니다. 중앙 쪽 삽입 및 삭제가 빈번히 되기 때문인 것 같습니다.&lt;/p&gt;

&lt;p&gt;각 정점마다 인접한 정점 번호를 담는 컨테이너가 2개 ($C_1$, $C_2$) 있다고 하고, $C_2$의 원소가 $C_1$의 원소보다 크다고 합시다. 원소에 직접적으로 접근할 때는 $C_1$의 최솟값, $C_2$의 최솟값, $C_1$의 최댓값 정도밖에 없습니다. 원소의 삭제 때문에 임의의 원소에 접근 가능하지 않으면 어려워보일 수 있지만, lazy하게 그때그때 원소를 제거해나갈 수 있다면 상관이 없습니다.&lt;/p&gt;

&lt;p&gt;때문에 front/back의 pop이 자유로운 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::list&lt;/code&gt;로 구현했습니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::deque&lt;/code&gt;은 메모리를 &lt;strong&gt;상당히&lt;/strong&gt; 많이 잡아먹습니다. 이에 대한 자세한 설명은 제가 삼성 소프트웨어 멤버십에 쓴 &lt;a href=&quot;http://www.secmem.org/blog/2019/11/14/c++-container-memory-usage/&quot;&gt;이 포스트&lt;/a&gt;에 나와 있습니다. 간단히 설명하면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::deque&lt;/code&gt; 하나당 기본적으로 (거의) 512바이트 단위로 청크를 조직하고 재할당도 일어나기 때문에 메모리 측면에서 비효율적입니다.&lt;/p&gt;

&lt;p&gt;원소 삽입은 정렬을 미리 한 다음 반으로 나누어 넣었으며, 컨테이너의 크기와 ‘컨테이너에는 있지만 이미 사용된 정점의 개수’를 관리하였습니다. 원소가 총 홀수 개 있을 때 $C_2$의 맨 앞 원소가 중앙값이 되도록 조절하였습니다.&lt;/p&gt;

&lt;p&gt;이 부분만 조금 더 자세히 설명해보겠습니다. 우리가 원하는 원소의 분포는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$(0, 1)$, $(1, 1)$, $(1, 2)$, $(2, 2)$, $\cdots$, $(\lfloor n/2 \rfloor, \lfloor (n+1)/2 \rfloor)$ 등등&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 원소들은 기본적으로 ‘유효한’ 원소여야 합니다. 때문에 각 컨테이너에 속하지만 유효하지 않은 원소의 개수를 $x_1$, $x_2$라 하면&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\lvert C_1 \rvert - x_1 \leq \lvert C_2 \rvert - x_2 &lt; \lvert C_1 \rvert - x_1 + 1 %]]&gt;&lt;/script&gt;

&lt;p&gt;이 성립해야 합니다. 때문에 while문을 체크하면서 원소들을 옮겨주면 됩니다. 이 과정에서 유효하지 않은 원소가 뽑히면 제거합니다. 재미있게도 원소를 컨테이너에서 제거하는 과정은 $\lvert C_i \rvert - x_i$ 값에 영향을 주지 않습니다. 둘 다 1 감소하기 때문입니다. 그렇기에 저는 양쪽의 $\lvert C_i \rvert - x_i$의 균형을 맞춘 후, 양 끝의 유효하지 않은 원소를 제거하였습니다. 어떤 원소가 유효하지 않은 상태인지는 배열 하나만 있으면 충분합니다.&lt;/p&gt;

&lt;p&gt;여기까지 하면 각 상태에서 어느 정점으로 가야 할지는 쉽게 계산할 수 있습니다. 원소 개수가 짝수면 $C_1$의, 홀수면 $C_2$의 첫 원소를 선택하면 됩니다.&lt;/p&gt;

&lt;p&gt;원소들이 한 번 들어오고 한 번 빠질 뿐더러, 다음 원소를 고르며 균형을 깨뜨리는 과정의 복원이 금방 될 수 있다고 판단하였기에 시간 복잡도는 정렬 $O(n \lg n)$에 $O(n+m)$이라고 생각합니다. 그런 것 치고는 상당히 퍼포먼스가 600ms 대로 느리긴 했습니다, cache hit가 잘 일어나지 않아서라고 생각합니다. 아니면 제 알고리즘이 비효율적일지도 모릅니다.&lt;/p&gt;

&lt;h1 id=&quot;codeforces-round-613-div-2-virtual&quot;&gt;Codeforces Round #613 (Div. 2) Virtual&lt;/h1&gt;

&lt;p&gt;정말 오랜만에 돌아보는 코포 라운드 virtual입니다. 셋은 무난하게 좋았습니다. 본 대회 때 스코어보드를 보기만 했는데 유달리 거의 모든 문제에서 정답률이 낮아서 불안불안했습니다.&lt;/p&gt;

&lt;h2 id=&quot;a--mezo-playing-zoma-001&quot;&gt;A : Mezo Playing Zoma (0:01)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L&lt;/code&gt; 하나로 1만큼 감소할 수 있고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt; 하나로 1만큼 증가할 수 있으니 답은 $n+1$입니다. Div2A 치고 깔끔하고 좋다고 생각합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1285/submission/68638644&quot;&gt;코드 링크&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;b--just-eat-it-010&quot;&gt;B : Just Eat It! (0:10)&lt;/h2&gt;

&lt;p&gt;말릴 뻔했습니다. 정해는 prefix나 suffix 중 합이 0 이상인 게 있으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NO&lt;/code&gt;, 아니면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YES&lt;/code&gt;입니다. 저는 약간 헷갈려서 prefix sum을 multiset에 넣고 맨 마지막에서만 예외처리를 했습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1285/submission/68639052&quot;&gt;코드 링크&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;c-fadi-and-lcm-020-1&quot;&gt;C. Fadi and LCM (0:20, +1)&lt;/h2&gt;

&lt;p&gt;문제를 잘못 이해하고 냈다가 예제랑 안 맞는 것도 제대로 확인 안하고 한 번 틀렸습니다. $k \geq 1$일 때 $LCM(a, b) \leq LCM(a, kb)$이므로 곱이 $X$가 되야 한다는 결론에 도달할 수 있고, 소수의 거듭제곱꼴을 고려하면 같은 소인수는 한 번에 몰아주어야 한다는 아이디어를 떠올릴 수 있습니다. 가장 작은 소인수 11개의 곱이 $2 \times 10^{11}$보다 살짝 크므로, 소인수분해를 한 다음에 완전탐색으로 최대를 최소하하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1285/submission/68639696&quot;&gt;코드 링크&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;d-dr-evil-underscores-028&quot;&gt;D. Dr. Evil Underscores (0:28)&lt;/h2&gt;

&lt;p&gt;XOR이 나와서 처음에는 겁을 먹었으나 최상위 비트부터 접근해보니 상당히 쉽게 풀렸습니다. 최상위 비트부터 지금 보고 있는 모든 수의 해당 비트가 같으면 $X$의 해당 비트를 똑같이 설정하고 다음 비트로 내려가면 됩니다. 두 비트가 모두 등장하면, 두 경우 모두 하위 비트로 내려간 다음에 최솟값을 택하면 됩니다. 어느 쪽이든 $2^k$는 더해야 합니다.&lt;/p&gt;

&lt;p&gt;모범 코드는 정렬을 이용했는데, 저는 Trie 위에서 트리 DP 하듯이 조사했습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1285/submission/68640107&quot;&gt;코드 링크&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;e-delete-a-segment-130&quot;&gt;E. Delete a Segment (1:30)&lt;/h2&gt;

&lt;p&gt;너무 말리지 않았나 싶습니다. disjoint set이 필요한지 아닌지도 불확실했고, segment tree로 나뉜 구간의 개수를 어떻게 구해야하지도 잘 구체화가 안 되었었습니다. 잘 생각해보니 1로만 이루어진 구간에 완전히 걸치는 횟수가 중요할 것 같아서 어떻게 잘 세긴 했습니다. 그러나 자기 자신이 1로만 이루어진 구간일 때 처리가 조금 골치가 아팠습니다. 해당 경우에 대한 반례도 간단히 나와서 조금 더 생각해본 다음에 양 구간의 끝만 확인하는 식으로 했는데, 한 번에 맞아서 정말 다행이었습니다. 2250점 문제 치고는 어렵다고 생각합니다.&lt;/p&gt;

&lt;p&gt;세그먼트 트리를 이용해 힘겹게 풀 수도 있지만, 간결한 라인 스위핑 풀이가 있어 소개합니다. 결국 우리가 구하고자 하는 값은 “기존 컴포넌트 수” + “$i$번째 구간을 제거할 때 증가하는 컴포넌트의 수”의 최댓값입니다.&lt;/p&gt;

&lt;p&gt;구간을 event로 보아 추가는 $(l_i, -i)$, 제거는 $(r_i, i)$로 해석하여 정렬을 해봅시다. 구간 $P$ 입장에서 세그먼트 $Q$를 제거해서 컴포넌트의 수가 증가하는 경우는 다음을 만족해야 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$P$는 $Q$에 포함되어야 합니다.&lt;/li&gt;
  &lt;li&gt;$P$를 추가할 때, 현재 존재하는 구간은 $Q$뿐이어야 합니다.
    &lt;ul&gt;
      &lt;li&gt;다른 구간이 존재한다면 $P$를 제거해도 컴포넌트의 수는 그대로입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;$P$보다 앞에 있으면서 $Q$와 겹치는 구간 $R$이 존재해야 합니다.
    &lt;ul&gt;
      &lt;li&gt;$Q$는 $P$와 $R$의 연결을 제거하는 역할이기 때문입니다.&lt;/li&gt;
      &lt;li&gt;예를 들어 $[1, 4]$, $[2, 3]$은 앞의 두 조건을 만족하지만, $[1, 4]$를 제거한다고 하여 컴포넌트의 수가 증가하진 않습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 조건은 의외로 코딩하기가 간단합니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::set&lt;/code&gt; 등에 id를 저장하며 현재 보고 있는 구간을 관리하면 됩니다. 때문에 이런 $(P, Q)$를 발견하면, $Q$쪽의 기여도를 하나 증가하는 식으로 구현하면 됩니다. 이 과정에서 초기 상태의 컴포넌트의 수도 셀 수 있습니다. 여기까지만 하면 기여도를 확인하면서 정답을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1285/submission/68643375&quot;&gt;대회 코드 링크&lt;/a&gt;
&lt;a href=&quot;https://codeforces.com/contest/1285/submission/68697439&quot;&gt;업솔빙 코드 링크&lt;/a&gt; 
(지금 보니 주석에 문법 실수가 있네요 ㅠㅠ)&lt;/p&gt;

&lt;h2 id=&quot;f-classical&quot;&gt;F. Classical?&lt;/h2&gt;

&lt;p&gt;문제는 한 줄에 설명할 수 있는 수준입니다. $1 \leq i &amp;lt; j \leq n \leq 10^5$ 이고 $1 \leq a_k \leq 10^5$일 때 $\max(LCM(a_i, a_j))$을 구하면 됩니다.&lt;/p&gt;

&lt;p&gt;스코어보드부터 무시무시한 수준이라 풀 수 없을 거라고 생각했고 버추얼 때는 금방 단념했습니다. 풀이를 보니 좀 새로웠습니다. 여기서는 &lt;a href=&quot;https://codeforces.com/blog/entry/72950?#comment-572483&quot;&gt;개량된 정해&lt;/a&gt;를 서술하고자 합니다.&lt;/p&gt;

&lt;p&gt;우선 입력으로 들어오는 수들의 모든 약수를 배열에 추가한 다음에, 여기에서 2개의 서로소인 수들을 잘 고르자는 것이 취지입니다. 어차피 $LCM(a, b) = \frac{ab}{\gcd(a, b)}$이기 때문입니다.&lt;/p&gt;

&lt;p&gt;곱을 최대화해야 하니 큰 수부터 보는 건 맞는 것 같은데, 여기서 신기한 방법을 씁니다. 내림차순으로 순서대로 스택에 넣는데, 새로 넣을 수 $x$와 서로소인 수가 없을 때까지 스택에서 수를 빼내고, 빼내면서 $x$와 빼는 수의 곱의 최댓값을 답과 비교하여 최대를 취합니다.&lt;/p&gt;

&lt;p&gt;이 과정이 맞는 이유는 (아주 엄밀하진 않지만) 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$x$와 서로소인 수 $y$가 스택에 있으면 현재 $y$ 입장에서는 $xy$가 곱의 최댓값입니다. 왜냐하면
    &lt;ul&gt;
      &lt;li&gt;$y$ 보다 스택에 뒤에 있는 수들과는 서로소가 아니며&lt;/li&gt;
      &lt;li&gt;스택에 들어오는 수는 내림차순이므로 감소하기 때문입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이 과정에서는 $x$와 서로소가 아닌 수 $y$와도 곱을 계산하여 갱신하지만, 그래도 됩니다. 마지막으로 빼는 수는 $x$와 서로소이면서 가장 크기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$x$와 서로소인 수가 스택에 있는지는 뫼비우스 함수 등을 써서 포함 배제를 사용하면 됩니다. $cnt_i$를 스택에 있는 수들 중 $i$의 배수의 개수라 하면, 넣고 뺄 때는 $d\,\vert\,x$인 모든 $d$에 대해 값을 바꾸면 되며, $x$와 서로소인 수(즉 최대공약수가 1인 수)의 개수는&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{d\,\vert\,x} \mu(d) \cdot cnt_d&lt;/script&gt;

&lt;p&gt;로 계산할 수 있습니다.&lt;/p&gt;

&lt;p&gt;뫼비우스 함수를 간단하게 계산할 수 있는 코드도 알아갈 수 있었습니다.
위에도 링크된 댓글의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mango_lassi&lt;/code&gt;님 코드에서 영향을 많이 받았습니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// mu : Möbius, dv : divisor&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAXN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAXN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1285/submission/68701006&quot;&gt;코드 링크&lt;/a&gt;&lt;/p&gt;</content><author><name>Sangheon Lee</name></author><category term="PS" /><category term="Codeforces" /><summary type="html">문제를 조금 풀고 CF 613을 버추얼로 해보았습니다.</summary></entry><entry><title type="html">2020년 1월 초반 Problem Solving</title><link href="/algo/recent-ps-2020-01-0x/" rel="alternate" type="text/html" title="2020년 1월 초반 Problem Solving" /><published>2020-01-10T23:00:00+09:00</published><updated>2020-01-10T23:00:00+09:00</updated><id>/algo/recent-ps-2020-01-0x</id><content type="html" xml:base="/algo/recent-ps-2020-01-0x/">&lt;p&gt;연말연초라 문제 풀이를 많이 하지는 못했습니다. HLD 정도만 제대로 다시 짜보고, 수학 문제들 위주로 풀어보았습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;topc-2015-e-egg&quot;&gt;TOPC 2015 E. Egg&lt;/h1&gt;

&lt;p&gt;문제 링크 : &lt;a href=&quot;https://www.acmicpc.net/problem/11012&quot;&gt;BOJ 11012&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;대표적인 persistent segment tree 사용 문제이고, 이전에 썼던 포스팅과 비교해가며 코딩해보았는데 좌표 압축 과정에서 황당한 실수를 며칠간 발견 못 해 고생했었습니다.&lt;/p&gt;

&lt;h1 id=&quot;boj-1040-정수&quot;&gt;BOJ 1040 정수&lt;/h1&gt;

&lt;p&gt;문제 링크 : &lt;a href=&quot;https://www.acmicpc.net/problem/1040&quot;&gt;BOJ 1040&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;찾아보니 반복문을 통해 수를 적절히 올려가며 되는지 안 되는지 판단하는 효율적인 전체 탐색도 있었는데, 잘 모르겠어서 그냥 동적 계획법으로 해결하였습니다.&lt;/p&gt;

&lt;p&gt;10개의 수 중 $K$개의 수를 사용하므로, $\binom{10}{K}$의 모든 조합에 대해 동적 계획법을 적용할 것입니다.&lt;/p&gt;

&lt;p&gt;상태는 다음 4가지를 요소로 구성됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;0의 경우, 지금 0이 와도 되는지 유무 (leading zero 관련)&lt;/li&gt;
  &lt;li&gt;남은 자리수를 배치할 때, 입력으로 주어진 수 이상으로 배치해야하는지의 유무&lt;/li&gt;
  &lt;li&gt;현재 보고 있는 자릿수의 위치&lt;/li&gt;
  &lt;li&gt;$k$개의 수 사용 유무를 의미하는 비트들&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이렇게 구성하면, 상태 전이는 반복문을 이용해 다음 자리로 넘어가는 방식으로 구성할 수 있습니다. 말로 설명하기가 어렵네요. &lt;a href=&quot;http://boj.kr/5b9f3fa4e74e40ae9aef087666455c8c&quot;&gt;코드&lt;/a&gt;를 보시는 게 이해가 빠를 것 같습니다. 시간 복잡도는 $O(\binom{10}{k} 2^k k)$인데 상태 표현 때문에 이런 저런 상수가 좀 크게 붙습니다.&lt;/p&gt;

&lt;h1 id=&quot;boj-17429-국제-메시-기구&quot;&gt;BOJ 17429 국제 메시 기구&lt;/h1&gt;

&lt;p&gt;문제 링크 : &lt;a href=&quot;https://www.acmicpc.net/problem/17429&quot;&gt;BOJ 17429&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;기본적으로 HLD + segtree라 크게 코멘트할 부분은 없는 문제입니다. 나중에 다른 포스팅으로 설명하도록 하겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;boj-1078-뒤집음&quot;&gt;BOJ 1078 뒤집음&lt;/h1&gt;

&lt;p&gt;문제 링크 : &lt;a href=&quot;https://www.acmicpc.net/problem/1078&quot;&gt;BOJ 1078&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;어떤 수 $D$가 주어질 때, $x$에서 $x$를 뒤집은 수를 뺀 수가 $D$가 되는 최소의 양의 정수 $x$를 찾는 문제입니다.&lt;/p&gt;

&lt;p&gt;우선 $x$에서 $x$를 뒤집은 수를 뺀 수는 9의 배수임을 알 수 있습니다. 때문에 9의 배수가 아니면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;을 출력하면 됩니다. 그리고 9의 배수이면서 10의 배수가 아닌 $x$에 대해 답이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt;일 때, $10x$의 답은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1D1&lt;/code&gt;이 됨을 관찰할 수 있습니다. 가장 큰 자릿수의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;와 가장 작은 자릿수의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;을 제외하고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt;가 10배 된 자리에 위치했기 때문입니다. $100x$는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10D01&lt;/code&gt;, $1000x$는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;100D001&lt;/code&gt;…로 진행됨을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;그 다음부터가 문제입니다. $D$가 $10^6$ 이상인 $x$들이 있기 때문입니다. 전수조사를 100만 단위로 조금 해본 결과, 맨 앞자리가 1일 때만 유효한 $D$들이 있었습니다. 이를 맨 앞의 1의 위치를 옮겨가면서 반복해보았고, $10^9$까지 유효한 $D$들이 있었습니다. $10^{10}$ 이상일 땐 나타나지 않았는데, 반전을 통해서 영향을 받는 자리수가 너무 커져서라고 생각했습니다. 결과적으로 500만개의 수만 살펴보면서 정답을 확인할 수 있었습니다.&lt;/p&gt;

&lt;h1 id=&quot;제3회-kriiicon-ㅍ번-피보나미얼&quot;&gt;제3회 kriiicon ㅍ번 피보나미얼&lt;/h1&gt;

&lt;p&gt;문제 링크 : &lt;a href=&quot;https://www.acmicpc.net/problem/11397&quot;&gt;BOJ 11397&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;피사노 주기와 관련된 문제로, 별도로 포스팅을 하도록 하겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;gcj-2008-round-1a-c2-numbers&quot;&gt;GCJ 2008 Round 1A C2 Numbers&lt;/h1&gt;

&lt;p&gt;문제 링크 : &lt;a href=&quot;https://www.acmicpc.net/problem/12925&quot;&gt;BOJ 12925&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;선형 점화식과 관련된 유명한 트릭을 사용해야 합니다. $X_n = \alpha^n + \beta^n$이라 정의할 때,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;X_{n+2} = (\alpha + \beta) X_{n+1} - \alpha\beta X_n&lt;/script&gt;

&lt;p&gt;이 성립합니다. 식을 전개하면 그대로 나옵니다.&lt;/p&gt;

&lt;p&gt;때문에 이차방정식의 근과 계수와의 관계처럼, $\alpha = 3 + \sqrt{5}$, $\beta = 3 - \sqrt{5}$로 잡아봅시다. 그러면&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;X_{n+2} = 6 X_{n+1} - 4 X_n&lt;/script&gt;

&lt;p&gt;의 식이 유도됩니다. 이 때, $n$이 양의 정수이면 $0 &amp;lt; \beta^n &amp;lt; 1$임을 알 수 있습니다. 그러므로 $X_n$의 마지막 3자리(즉$\mod 1000$)를 알 수 있으면, $\alpha^n$의 마지막 3자리를 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;위 점화식을 통해 $X_{n}$을 알아내는 대표적인 방법은 행렬곱이지만, 저는 $X_n$의 본래 정의에 입각하여&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;X_{2n} = X_n^2 - 2 \times (\alpha\beta)^n, ~~ X_{2n+1} = X_nX_{n+1} - (\alpha+\beta)(\alpha\beta)^n&lt;/script&gt;

&lt;p&gt;를 이끌어내어 재귀적으로 계산하였습니다. 이 과정에서 조사하게 되는 $X_i$의 개수는 $O(\lg n)$개 정도이므로, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::map&lt;/code&gt; 같은 map 형태의 자료구조를 이용하여 memoization을 통해 계산할 수도 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;boj-11691-lcmi-j&quot;&gt;BOJ 11691 LCM(i, j)&lt;/h1&gt;

&lt;p&gt;문제 링크 : &lt;a href=&quot;https://www.acmicpc.net/problem/11691&quot;&gt;BOJ 11691&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;$\sum_{i}^{n}\sum_{j,\ i &amp;lt; j}^{n} \text{lcm}(i, j)$을 구하는 문제입니다. 뫼비우스 반전 공식 등을 이용하여 조금 더 나은 시간 복잡도를 보이는 풀이도 있는 것 같으나 여기서는 약간 일반화된 풀이를 소개하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;$\text{lcm}(a, b) = ab / \gcd(a, b)$이므로, $\gcd$를 잘 처리할 수 있는 방법을 생각해보아야 합니다. 여기서 특수한 수열 $w_i$를 정의하도록 하겠습니다. 수열 ${w_i}$는 다음을 만족합니다.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{d | k} w_d = \frac{1}{k}&lt;/script&gt;

&lt;p&gt;에라토스테네스의 체를 구하는 것처럼, $w_1$부터 $w_n$까지 $O(n \lg n \lg \lg n)$에 구할 수 있습니다.&lt;/p&gt;

&lt;p&gt;그 다음 계산하고자 하는 값은 $\sum_{i}^{n}\sum_{j}^{n} \text{lcm}(i, j)$입니다. $i = j$일 때만 제외하고 2로 나누면 구하고자 하는 값이 나옴을 알 수 있습니다. 여기서 식을 조금 변형해보겠습니다.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
\sum_{i}^{n}\sum_{j}^{n} \text{lcm}(i, j) &amp;= \sum_{i}^{n}\sum_{j}^{n} \frac{ij}{\gcd(i, j)} \\
&amp;= \sum_{i}^{n}\sum_{j}^{n}\left( ij\sum_{d|\gcd(i, j)} w_d\right)\\
&amp;= \sum_{d}^n\sum_{d|i}^n\sum_{d|j}^n ij w_d\\
&amp;= \sum_{d}^n w_d \sum_{d|i}^n\sum_{d|j}^n ij\\
&amp;= \sum_{d}^n w_d (\sum_{d|i}^n)^2
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;위와 같이 변형하면, 1부터 $n$까지 중 $d$의 배수들의 합을 통해 위 식을 계산할 수 있고, 거기에서 제곱합을 빼서 원래 구하고자 했던 값을 계산할 수 있습니다. 수가 연속되어 있으므로 합공식을 이용하여 총 $O(n)$에 간단히 전처리할 수 있습니다.&lt;/p&gt;

&lt;p&gt;주어진 수가 연속된 자연수가 아니라 수열일 때도 비슷하게 해결할 수 있습니다. 해당 문제는 &lt;a href=&quot;https://atcoder.jp/contests/agc038/tasks/agc038_c&quot;&gt;AGC 038 C번 LCMs&lt;/a&gt;로 출제된 바 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;제3회-kriiicon-ㅆ번-씽크스몰&quot;&gt;제3회 kriiicon ㅆ번 씽크스몰&lt;/h1&gt;

&lt;p&gt;문제 링크 : &lt;a href=&quot;https://www.acmicpc.net/problem/11385&quot;&gt;BOJ 11385&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 문제가 나올 당시였던 2015년 중순이라면 몰라도 이제 FFT와 NTT는 well-known topic이 되어 버렸습니다. 차수가 최대 $10^6$이므로, PS에서 주로 쓰이는 Cooley-Tukey FFT algorithm을 사용하려면 최대 크기 $2^{21}$의 배열을 다루어야 합니다.&lt;/p&gt;

&lt;p&gt;일반적으로 FFT는 NTT보다 빠르지만, 이 문제는 FFT 실수 오차가 상당히 빡세다고 합니다. 그걸 모르고 NTT로 짜보았는데, 순환군의 크기가 $2^{21}$ 이상이면서 곱하면 $10^{18} + 10^{12}$를 근소하게 넘고, $2^{63}-1$보다 작으며, 각각의 크기는 $2^{31}-1$보다 작은 NTT-friendly 소수 2개가 다행히 팀노트에 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$998244353 = 119 \times 2^{23} + 1$. 원시근: $3$.&lt;/li&gt;
  &lt;li&gt;$1012924417 = 483 \times 2^{21} + 1$. 원시근: $5$.&lt;/li&gt;
  &lt;li&gt;이 둘의 곱은 $10^{18} + 10^{12}$보다 조금 더 큽니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그래서 이 값을 구하고, 중국인의 나머지 정리까지 갈 것도 없이 연립합동방정식을 세워 원래 값을 복원해낼 수 있습니다. 10초 제한에 9초나 걸렸습니다. NTT가 여러모로 느리다는 걸 다시 깨달았습니다.&lt;/p&gt;</content><author><name>Sangheon Lee</name></author><category term="PS" /><summary type="html">연말연초라 문제 풀이를 많이 하지는 못했습니다. HLD 정도만 제대로 다시 짜보고, 수학 문제들 위주로 풀어보았습니다.</summary></entry><entry><title type="html">Persistent Segment Tree w/ BOJ 13538</title><link href="/algo/persistent-segment-tree-xor-query/" rel="alternate" type="text/html" title="Persistent Segment Tree w/ BOJ 13538" /><published>2019-12-29T19:30:00+09:00</published><updated>2019-12-29T19:30:00+09:00</updated><id>/algo/persistent-segment-tree-xor-query</id><content type="html" xml:base="/algo/persistent-segment-tree-xor-query/">&lt;p&gt;헷갈리던 Persistent Segment Tree를 드디어 이해했습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Persistent Segment Tree란, 크기 $N$의 segment tree가 총 $M$번 상태 변화가 일어날 때, 이를 공간 복잡도 $O(N + M \lg N)$에 저장하는 자료구조입니다. 대표적인 예시로 2차원 격자에서, 점 갱신이 일어나지 않을 때 $x_1 \leq x \leq x_2$이면서 $y_1 \leq y \leq y_2$를 만족하는 점의 개수를 구하는데 사용될 수 있습니다.&lt;/p&gt;

&lt;p&gt;Persistent Segment Tree의 개념은 다른 블로그에 설명이 잘 되어 있으므로, 여기서는 &lt;a href=&quot;https://icpc.me/13538&quot;&gt;BOJ 13538 XOR 쿼리&lt;/a&gt;를 해결하는데 사용한 코드를 서술하고 풀이해보자 합니다. 이해가 될 듯 말 듯 한 분들은 코드의 설명을 보시는 게 나을 수도 있습니다.&lt;/p&gt;

&lt;p&gt;코드는 &lt;a href=&quot;https://cubelover.tistory.com/15&quot;&gt;cubelover님의 코드&lt;/a&gt;와 매우 흡사하게 진행됩니다.&lt;/p&gt;

&lt;h1 id=&quot;요구-사항&quot;&gt;요구 사항&lt;/h1&gt;

&lt;p&gt;이 문제의 골자는 다음과 같습니다. 배열 $A$가 있을 때,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1번 쿼리 : $A$의 끝에 $x$를 추가&lt;/li&gt;
  &lt;li&gt;2번 쿼리 : $A[L, R]$에서 $x$와 XOR한 값이 최대인 $y$ 계산&lt;/li&gt;
  &lt;li&gt;3번 쿼리 : $A$의 마지막 $k$ 개 원소 삭제&lt;/li&gt;
  &lt;li&gt;4번 쿼리 : $A[L, R]$에서 $x$ 이하의 원소 개수 계산&lt;/li&gt;
  &lt;li&gt;5번 쿼리 : $A[L, R]$에서 $k$ 번째로 작은 수 계산&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root[i]&lt;/code&gt;를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt;번째 값까지 추가한 세그먼트 트리의 root라고 하면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root[i]&lt;/code&gt;의 값이 갱신되는 경우는 없음을 알 수 있습니다. 마지막 원소를 삭제하는 건 갱신이 아닌 삭제이고, 이전의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root[i]&lt;/code&gt;에는 영향을 미치지 않기 때문에 갱신이 아닙니다.&lt;/p&gt;

&lt;h1 id=&quot;pst-코드&quot;&gt;PST 코드&lt;/h1&gt;
&lt;p&gt;코드와 함께, 이 쿼리들을 어떻게 처리하는지 보도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;node-구조체&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node&lt;/code&gt; 구조체&lt;/h2&gt;

&lt;p&gt;Persistent Segment Tree의 각 노드는 이진 트리답게, 왼쪽 / 오른쪽 자식을 가리키는 포인터와 현재 값을 저장합니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 이 노드를 얼마나 저장해야 하느냐도 중요합니다. 크기를 $N$, 변화 개수를 $M$이라 할 때&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1-indexed 초기 세그먼트 트리는 $2N$개의 노드를 요구로 합니다.&lt;/li&gt;
  &lt;li&gt;이후, 세그먼트 트리의 변화를 저장할 때마다 $\lg N$개의 칸이 갱신되고, 별도로 한 개의 root node가 할당됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러므로 node는 $2N + M (\lg N + 1)$개 있으면 되고, 각 세그먼트 트리의 root를 저장할 node pointer $M+1$개가 필요합니다. 코드에서는 혹시 몰라 1을 추가했습니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500005&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;초기화&quot;&gt;초기화&lt;/h2&gt;

&lt;p&gt;PST의 기본이 되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root[0]&lt;/code&gt; 세그트리입니다. 모든 값을 0으로 세팅하고, 자식 관계만 설정해주되 리프 노드는 그대로 내버려둡니다. 이러면 의미상 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[1]&lt;/code&gt;이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root[0]&lt;/code&gt;이 되며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[0]&lt;/code&gt;은 null pointer를 의미하게 됩니다. 이는 1-index 세그먼트 트리랑 비슷합니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tcnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;세그먼트-트리-생성&quot;&gt;세그먼트 트리 생성&lt;/h2&gt;

&lt;p&gt;기존 세그먼트 트리들로부터 새로운 세그먼트 트리를 생성하는 과정입니다. 알고리즘을 생각하면 그리 어렵진 않습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우선, 새로운 루트 노드를 할당합니다. (처음에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;로 들어갑니다)&lt;/li&gt;
  &lt;li&gt;한 칸 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;)만 갱신이 되기 때문에, 직전의 세그먼트 트리를 의미하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q&lt;/code&gt;에서 $O(\lg n)$개 정도의 노드 변화만 있게 됩니다.&lt;/li&gt;
  &lt;li&gt;바뀌는 쪽만 새로 노드를 할당하고, 그대로인 쪽은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q&lt;/code&gt;의 자식을 그대로 대입합니다.&lt;/li&gt;
  &lt;li&gt;탑다운 방식으로 반복합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이를 다음과 같이 구현할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// lv == -1 : leaf node, child with null&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lv&lt;/code&gt;은 변경되는 index &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;에서, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 &amp;lt;&amp;lt; lv&lt;/code&gt;을 계산하여 좌우 방향을 결정하기 위해 필요합니다. 연산자 우선 순위에 의해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x &amp;gt;&amp;gt; lv &amp;amp; 1 &lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 &amp;lt;&amp;lt; lv&lt;/code&gt; 자리에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;의 비트가 1인지 묻는 것과 동일합니다. 0이면 왼쪽, 1이면 오른쪽을 갱신합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lv&lt;/code&gt;이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;이라는 건 자식이 모두 null pointer (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[0]&lt;/code&gt;)인, 리프 노드라는 뜻입니다. 기본적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt;이 0으로 초기화되므로, null pointer를 가리키게 됩니다.&lt;/p&gt;

&lt;p&gt;이를 통해 1번 쿼리를 해결할 수 있습니다.&lt;/p&gt;

&lt;p&gt;중요한 점은, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root[i]&lt;/code&gt;는 1번째 수부터 i번째 수까지 추가된 세그트리라는 사실입니다. 밑에서 서술된 쿼리 함수들은 이 성질에 기반해 작동합니다.&lt;/p&gt;

&lt;h2 id=&quot;구간-최대-xor-쿼리&quot;&gt;구간 최대 XOR 쿼리&lt;/h2&gt;

&lt;p&gt;이 문제에서 가장 복잡하면서 흔치 않은 쿼리가 아닌가 생각됩니다. 변화가 점층적으로 이루어진다는 점에 기반하여, i번째부터 j번째 세그먼트 트리를 보고 싶으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root[j]&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root[i-1]&lt;/code&gt;를 비교해가며 따지면 됩니다. prefix sum의 개념과 비슷합니다.&lt;/p&gt;

&lt;p&gt;함수의 로직 자체는 복잡하지 않습니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;의 비트를 따져서, XOR를 최대화할 수 있는 방향으로 진행하는 것입니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pst_xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pst_xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pst_xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pst_xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pst_xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q&lt;/code&gt; 대신 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;를 사용한 이유는 이 두 포인터를 통해 보고자 하는 수들의 범위를 지정할 수 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;는 구간을 처리하기 위한 node 포인터, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;는 2번 쿼리의 값, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lv&lt;/code&gt;는 보아야 할 비트의 위치를 의미합니다. 이 함수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt; 사이에 있는 수 (변화) 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;랑 XOR해서 가장 큰 값을 반환합니다.&lt;/p&gt;

&lt;p&gt;이 함수를 통해 2번 쿼리를 해결할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;구간-원소-개수-쿼리&quot;&gt;구간 원소 개수 쿼리&lt;/h2&gt;

&lt;p&gt;j번째 세그트리에서 원소의 개수를 따지는 건 어렵지 않습니다. 역시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;의 비트를 따져가면서 1이면 (왼쪽) + (오른쪽 재귀), 0이면 (왼쪽 재귀)를 더하면 됩니다.&lt;/p&gt;

&lt;p&gt;리프 노드 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lv == -1&lt;/code&gt;)일 때도 값을 더해주는 걸 잊으면 안 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pst_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pst_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pst_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;는 지금 보고 있는 node 포인터, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;는 4번 쿼리의 값, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lv&lt;/code&gt;는 보아야 할 비트의 위치를 의미합니다. 이 함수는 지금 보고 있는 노드에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; 이하의 원소 개수를 반환합니다.&lt;/p&gt;

&lt;p&gt;이 쿼리를 통해 4번 쿼리를 해결할 수 있습니다 (2번 호출하면 됩니다).&lt;/p&gt;

&lt;h2 id=&quot;구간-k번째-원소-쿼리&quot;&gt;구간 k번째 원소 쿼리&lt;/h2&gt;

&lt;p&gt;위에 있던 XOR 쿼리와 비슷하게, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;를 뺀 게 실제로 우리가 보아야 할 유효한 구간입니다. 답이 되는 index를 포함하는 쪽으로 재귀 함수를 호출합니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pst_kth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pst_kth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pst_kth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;는 구간을 처리하기 위한 node 포인터, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;는 5번 쿼리의 값, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lv&lt;/code&gt;는 보아야 할 비트의 위치를 의미합니다. 이 함수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt; 사이에 있는 수 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;번째로 작은 수를 반환합니다 (1-index).&lt;/p&gt;

&lt;p&gt;이 함수로 5번 쿼리를 해결할 수 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;main-함수&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 함수&lt;/h1&gt;

&lt;p&gt;나머지 3번 쿼리는&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 함수에서 카운터를 감소하는 걸로 처리할 수 있고, 이제 쿼리만 호출하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ios_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_with_stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// root node 생성&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pst_xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pst_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pst_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pst_kth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 짜면, &lt;a href=&quot;https://icpc.me/13538&quot;&gt;BOJ 13538 XOR 쿼리&lt;/a&gt;를 시간 복잡도 $ O(M \lg N)$ 해결할 수 있습니다 ($ N = 2^{19}$).&lt;/p&gt;</content><author><name>Sangheon Lee</name></author><category term="PS" /><category term="Data Structure" /><summary type="html">헷갈리던 Persistent Segment Tree를 드디어 이해했습니다.</summary></entry><entry><title type="html">블로그에 MathJax 추가</title><link href="/blog/add-mathjax/" rel="alternate" type="text/html" title="블로그에 MathJax 추가" /><published>2019-12-29T17:00:00+09:00</published><updated>2019-12-29T17:00:00+09:00</updated><id>/blog/add-mathjax</id><content type="html" xml:base="/blog/add-mathjax/">&lt;p&gt;수식을 보기 좋게 렌더링해주는 &lt;a href=&quot;https://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt;를 추가하였습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;$ e^{\pi i} + 1 = 0$ 같이 인라인 수식도,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;a^2 + b^2 = c^2&lt;/script&gt;

&lt;p&gt;같은 수식도 쓸 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.janmeppe.com/blog/How-to-add-mathjax-to-minimal-mistakes/&quot;&gt;이 포스트&lt;/a&gt;
의 도움을 받아 쉽게 추가할 수 있었습니다.&lt;/p&gt;</content><author><name>Sangheon Lee</name></author><category term="Jekyll" /><summary type="html">수식을 보기 좋게 렌더링해주는 MathJax를 추가하였습니다.</summary></entry><entry><title type="html">Sibelius Violin Concerto in D minor, Op. 47</title><link href="/music/sibelius-violin-concerto/" rel="alternate" type="text/html" title="Sibelius Violin Concerto in D minor, Op. 47" /><published>2019-12-23T01:00:00+09:00</published><updated>2019-12-23T01:00:00+09:00</updated><id>/music/sibelius-violin-concerto</id><content type="html" xml:base="/music/sibelius-violin-concerto/">&lt;p&gt;듣고 왜 이 협주곡을 이전에 알지 못했을까 싶었습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;https://terms.naver.com/entry.nhn?cid=59000&amp;amp;docId=3571046&amp;amp;categoryId=59000&quot;&gt;이 NAVER 지식백과&lt;/a&gt;의 칼럼을 통해
배경과 음악적 느낌을 접하시면 될 것 같습니다.&lt;/p&gt;

&lt;p&gt;연주 시간은 대략 27분에서 33분 정도입니다.&lt;/p&gt;

&lt;!--[![IMAGE ALT TEXT](http://img.youtube.com/vi/YsbrRAgv1b4/0.jpg)](http://www.youtube.com/watch?v=YsbrRAgv1b4 &quot;Video Title&quot;) --&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/YsbrRAgv1b4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;
연주도 일품이지만, 막심 벤게로프의 표정 변화를 보며 웃음을 참지 못하는 분들도 있으리라 생각합니다.&lt;/p&gt;</content><author><name>Sangheon Lee</name></author><category term="classic" /><summary type="html">듣고 왜 이 협주곡을 이전에 알지 못했을까 싶었습니다.</summary></entry><entry><title type="html">Jekyll 기반 블로그 글꼴 수정하기</title><link href="/blog/jekyll-change-fonts/" rel="alternate" type="text/html" title="Jekyll 기반 블로그 글꼴 수정하기" /><published>2019-12-22T20:00:00+09:00</published><updated>2020-01-11T13:40:00+09:00</updated><id>/blog/jekyll-change-fonts</id><content type="html" xml:base="/blog/jekyll-change-fonts/">&lt;p&gt;Jekyll 같은 정적 웹페이지 생성기는 편하지만, 글꼴처럼 세부 설정을 건드리는 건
편하지 않습니다.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;(2020.01.11 수정. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language-plaintext&lt;/code&gt; 쪽을 추가했습니다.)&lt;/p&gt;

&lt;p&gt;첫 포스트에서 추천드린 &lt;a href=&quot;https://github.com/mmistakes/mm-github-pages-starter&quot;&gt;이 repo&lt;/a&gt;에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; 등 디렉토리가 없습니다. 그럼에도 불구하고 잘 작동하는 이유는
remote에 있는 설정을 그대로 가져다가 쓰기 때문입니다.
때문에, 이쪽 관련된 설정을 건드리는 건 얼핏 보기엔 쉬워 보이지 않습니다.&lt;/p&gt;

&lt;p&gt;몇 시간에 걸친 구글링과 삽질을 통해, 블로그 전체에 ‘Noto Sans KR’과
‘Ubuntu Mono’를 적용하고, 글꼴 크기를 조금 줄여 적용할 수 있었습니다.&lt;/p&gt;

&lt;h1 id=&quot;글꼴-설정-방법&quot;&gt;글꼴 설정 방법&lt;/h1&gt;
&lt;p&gt;많은 사람들이 글꼴을 설정하고 싶어했습니다. &lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes/issues/1219&quot;&gt;이 issue&lt;/a&gt;
또한 예외는 아니었습니다. 해당 글에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass&lt;/code&gt; 폴더 어딘가의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_variables.scss&lt;/code&gt;나
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_reset.scss&lt;/code&gt;를 덮어쓰는 기존의 해결법이 설정과 꼬일 수 있어서 좋지 않다고
지적하고 있습니다. 여기에 이 repo의 개발자가 훨씬 좋은 방법을 제시합니다.
&lt;strong&gt;모든 사용자 정의 css를&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/css/main.scss&lt;/code&gt;&lt;strong&gt;에 덮어쓰라는 것입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그 이후의 과정을 굳이 서술하기보다는, 결론을 제시하는 게
모두에게 편하지 않을까요? 구글링을 통해 여러 의견을 종합하여 만든 파일입니다.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; 
# &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Only&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Sass&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;needs&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matter&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; (&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dashes&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;are&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enough&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;) 
&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; 

// &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mmistakes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimal-mistakes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;docs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stylesheets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;#custom&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;izing&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$sans-serif&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Noto Sans KR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$monospace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ubuntu Mono'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$type-size-4-5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.12em&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Ubuntu Mono is a bit small&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@charset&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minimal-mistakes/skins/aqua&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// skin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minimal-mistakes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(https://fonts.googleapis.com/css?family=Noto+Sans+KR|Ubuntu+Mono)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// https://github.com/mmistakes/minimal-mistakes/issues/1219&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// change to whatever&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$medium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// change to whatever&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$large&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// change to whatever&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$x-large&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// change to whatever&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$monospace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$type-size-4-5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.language-plaintext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$monospace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$type-size-5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#c0ffee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 파일을 만들면&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기본 글꼴이 Noto Sans KR로 변경되며,&lt;/li&gt;
  &lt;li&gt;고정폭 글꼴은 Ubuntu Mono로 설정되고&lt;/li&gt;
  &lt;li&gt;글꼴 크기도 설정된 것처럼 작아지면서&lt;/li&gt;
  &lt;li&gt;code highlight(backtick 3개/3개)의 폰트 크기도 변경되고&lt;/li&gt;
  &lt;li&gt;inline code(backtick 1개/1개)의 폰트 크기 및 배경 색깔이 변경됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;첫 번째로 나오는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$sans-serif&lt;/code&gt;는  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_variables.scss&lt;/code&gt;에서 정의되는 sans-serif 관련
변수인데, 조금 읽다보면 이 변수가 그대로
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$global-font-family: $sans-serif !default;&lt;/code&gt;나
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$header-font-family: $sans-serif !default;&lt;/code&gt;처럼 실제 문서 글꼴로 적용되는
코드가 나옵니다.&lt;/p&gt;

&lt;p&gt;위에 있는 documentation 링크에 의하면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt;를 하기 전에 변수에 값을 대입하여
사용자가 정의하고 싶은 값을 적용할 수 있습니다. 그래서 두 글꼴을 대입하였습니다.&lt;/p&gt;

&lt;p&gt;글꼴을 실제로 불러오는 과정은 &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt;를 통해 한 줄에
가능합니다.&lt;/p&gt;

&lt;p&gt;그 이후에는 해당 issue의 해결법을 적용하였습니다 (4px씩 줄였습니다).
Jekyll에서 컴파일 하는 과정에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@import &quot;minimal-mistakes/skins/aqua&quot;; // skin&lt;/code&gt;
같은 줄들은 자동으로 생성됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;highlight&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language-plaintext&lt;/code&gt; 역시 Ubuntu Mono의 기본 크기 때문에
수정할 수밖에 없었는데, html 요소의 이름과 연관된 것 같아 설정해보았는데
다행히 잘 작동하였습니다. 색깔을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c0ffee&lt;/code&gt;로 장난삼아 해보았는데, 기본 색깔과 잘
어울리는 것 같아 일단 점찍어놓았습니다.&lt;/p&gt;

&lt;p&gt;헤더는 다른 폰트로 설정해서 더 멋있게 할 수 있지 않을까 싶지만,
디자인에 조예가 깊지 않고 지금 보기에도 괜찮아 일단 여기에서 멈추려 합니다.&lt;/p&gt;</content><author><name>Sangheon Lee</name></author><category term="Jekyll" /><summary type="html">Jekyll 같은 정적 웹페이지 생성기는 편하지만, 글꼴처럼 세부 설정을 건드리는 건 편하지 않습니다.</summary></entry><entry><title type="html">블로그를 시작했습니다</title><link href="/blog/hello-jekyll/" rel="alternate" type="text/html" title="블로그를 시작했습니다" /><published>2019-12-22T18:00:00+09:00</published><updated>2019-12-22T18:00:00+09:00</updated><id>/blog/hello-jekyll</id><content type="html" xml:base="/blog/hello-jekyll/">&lt;p&gt;미루고 미루던 Jekyll 블로그 공사를 진행했습니다.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;정말 Github Page와 Jekyll의 궁합이 좋긴 하네요.
Minimal Mistakes도 정말 깔끔하고 좋은 테마입니다.
Github Page + Jekyll 처음 써보시는 분이라면, &lt;a href=&quot;https://github.com/mmistakes/mm-github-pages-starter&quot;&gt;이 repo&lt;/a&gt;를
clone 떠서 바로 시작해보아도 좋을 정도입니다.&lt;/p&gt;

&lt;p&gt;블로그에 대체 뭘 쓰면 좋을까 고민이 많았습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;알고리즘 강의. 제가 잘 모르는 내용이나, 이전에 동아리에서 다루었던
내용을 beamer로 다시 정리하는 알고리즘 포스팅이 가장 흔한 방법 중 하나입니다.
하지만 이제 한국어로 작성된 알고리즘 / PS 블로그가 양적으로나 질적으로나
충분히 많고, 강의자료를 (그것도 TeX으로) 만드는 것도 상당히 시간을 많이
요구하여 기각하였습니다.&lt;/li&gt;
  &lt;li&gt;문제 풀이. 푼 문제에 대한 고찰과 코드 리뷰는 또한 기본적인 포스팅 중
하나입니다. 그런데 ICPC 시즌도 지난 지금 과연 문제를 열심히 풀까가 미지수여서,
잘 올라갈지는 모르겠습니다.&lt;/li&gt;
  &lt;li&gt;문제집 제작 및 추천. 후학들을 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;road_to_purple&lt;/code&gt; 같은 재밌는 문제집이나
난이도에 따른 문제집을 만들어보고 싶은데, &lt;a href=&quot;https://solved.ac&quot;&gt;solved.ac&lt;/a&gt;가
그 역할을 대신 수행하고 있어 보입니다.&lt;/li&gt;
  &lt;li&gt;워게임. 복습용으로 이전에 풀어놓았던 워게임 풀이를 올리는 것도 생각해보았지만,
다시 하라고 하면 또 고생할 것 같아 잘 모르겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;방학이 끝나고 여유가 생긴 상황에서 &lt;strong&gt;‘내가 쓸 수 있는 게 뭘까’&lt;/strong&gt;에
집중해보았습니다. 다들 비슷하게 문제를 풀고, 맞왜틀을 겪고, 레이팅이 치솟았다가
떨어집니다. 학업, 직업과 병행하면서요. 하지만 제가 겪은 경험과 이에 대한 주관적
평가는, 제가 아니고서는 느낄 수도 생각할 수도 없는 주제입니다.&lt;/p&gt;

&lt;p&gt;이를 기반으로 하니 다음을 올리면 좋을 것 같다고 생각되었습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;팀연습 기록.&lt;/strong&gt; 올해 몸담은 ICPC 팀인 ‘Powered by Zigui’에 어쩌다보니
들어가게 되었는데, 힘들기도 했지만 다들 같이 팀연습하면서 친목도 다지고
실력도 기를 수 있었습니다. Zigui님께 코칭도 받고 팀연습에서 참교육당하기도
했지만, 결과적으로 ICPC 2019 Danang Regional에서 3등이라는 쾌거를 이루며
2019년 유종의 미를 거둘 수 있었습니다. 이런저런 이야기들을 공유하고자 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;강의 정리.&lt;/strong&gt; 이젠 1/2학년 때 배운 게 그때만큼 잘 생각나지 않습니다.
분명히 중요한 개념들을 배웠을텐데…일반적으로 컴퓨터 공학 쪽에서 논의되는
개념을 정리해보고자 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;음악 추천.&lt;/strong&gt; 어렸을 때부터 절대음감이었고, 고등학교 땐 작곡도 했었는데
이제는 그럴 여력이 잘 나지 않아서 아쉽습니다. 막귀라서 정말 별별 음악을 다
좋아합니다. 주로 클래식이 올라갈 것 같은데, 제가 클래식을 면밀히 평가 및
분석할 수 있는 식견이 되지 못해 안타깝습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;고군분투.&lt;/strong&gt; 전 개발도 거의 안 해보았고, 웹 쪽은 건드려본 적도 없습니다.
C++이나 Python 문법도 잘 모릅니다. 조금씩 배우는 과정을 올려보고자 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;기타.&lt;/strong&gt; 그 외에 다양한 주제들을 올리고자 합니다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Sangheon Lee</name></author><category term="Jekyll" /><summary type="html">미루고 미루던 Jekyll 블로그 공사를 진행했습니다.</summary></entry></feed>